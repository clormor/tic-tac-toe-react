{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Row","start","rowNum","renderSquare","i","squares","Board","renderRow","Game","state","history","Array","of","length","fill","xIsNext","isXNext","moveNumber","this","setState","desc","key","jumpTo","status","current","winner","calculateWinner","historyButtons","map","_board","renderHistoryButton","handleClick","slice","concat","React","Component","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.834c3be8.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Row(props) {\n  let rowNum = props.rowNum;\n  let start = 3 * rowNum;\n  let renderSquare = (i) => (\n    <Square value={props.squares[i]} onClick={() => props.onClick(i)} />\n  );\n  return (\n    <div className=\"board-row\">\n      {renderSquare(start++)}\n      {renderSquare(start++)}\n      {renderSquare(start++)}\n    </div>\n  );\n}\n\nfunction Board(props) {\n  let renderRow = (i) => (\n    <Row rowNum={i} squares={props.squares} onClick={props.onClick} />\n  );\n  return (\n    <div>\n      {renderRow(0)}\n      {renderRow(1)}\n      {renderRow(2)}\n    </div>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array.of({ length: 9 }).fill(null),\n        },\n      ],\n      xIsNext: this.isXNext(0),\n      moveNumber: 0,\n    };\n  }\n\n  isXNext(moveNumber) {\n    return moveNumber % 2 === 0;\n  }\n\n  jumpTo(moveNumber) {\n    this.setState({\n      history: this.state.history,\n      xIsNext: this.isXNext(moveNumber),\n      moveNumber: moveNumber,\n    });\n  }\n\n  renderHistoryButton(moveNumber) {\n    let desc = moveNumber ? `Move ${moveNumber}` : \"Restart\";\n    return (\n      <li key={moveNumber}>\n        <button onClick={() => this.jumpTo(moveNumber)}>{desc}</button>\n      </li>\n    );\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.moveNumber];\n    const winner = calculateWinner(current.squares);\n    let historyButtons = history.map((_board, moveNumber) =>\n      this.renderHistoryButton(moveNumber)\n    );\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{historyButtons}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.moveNumber + 1);\n    const current = history[this.state.moveNumber];\n    const squares = Array.of(current.squares);\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n        },\n      ]),\n      moveNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n}\n\n/**\n * Determines if someone has won a game of tic-tac-toe\n * @param {Array} squares An array of length 9 that represents the board (each element should be null, 'X' or 'O')\n * @returns null if no winner or the winning player (e.g. 'X' or 'O')\n */\nfunction calculateWinner(squares) {\n  /* Possible winning lines */\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  /* Check every possible winning line */\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    /* If every square in the winning line is non-null and equal, that player has won */\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  /* If we get here, no one has won (yet) */\n  return null;\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}